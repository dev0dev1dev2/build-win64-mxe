This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: "fix@me" <fix@me>
Date: Fri, 24 Sep 2010 23:34:26 +0200
Subject: [PATCH 1/2] s,DllMain,static _disabled_DllMain,


diff --git a/gsf/gsf-utils.c b/gsf/gsf-utils.c
index 1111111..2222222 100644
--- a/gsf/gsf-utils.c
+++ b/gsf/gsf-utils.c
@@ -76,9 +76,9 @@ static GTypeModule *static_type_module = NULL;
 #include <windows.h>
 static HMODULE gsf_dll_hmodule;
 BOOL WINAPI
-DllMain (HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
+static _disabled_DllMain (HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
 BOOL WINAPI
-DllMain (HINSTANCE hinstDLL, DWORD fdwReason, G_GNUC_UNUSED LPVOID lpvReserved)
+static _disabled_DllMain (HINSTANCE hinstDLL, DWORD fdwReason, G_GNUC_UNUSED LPVOID lpvReserved)
 {
 	if (fdwReason == DLL_PROCESS_ATTACH) gsf_dll_hmodule = hinstDLL;
 	return TRUE;

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 2 Mar 2020 17:00:00 +0100
Subject: [PATCH 2/2] Revert "Attempt ARM fix."

This reverts commit 2e7e842fd277fbbbf3f943dfd8511a7eee6721f3.

diff --git a/gsf/gsf-utils.c b/gsf/gsf-utils.c
index 1111111..2222222 100644
--- a/gsf/gsf-utils.c
+++ b/gsf/gsf-utils.c
@@ -29,17 +29,6 @@
 #include <ctype.h>
 #include <string.h>
 
-/*
- * Glib gets this wrong, really.  ARM's floating point format is a weird
- * mixture.
- */
-#define G_ARMFLOAT_ENDIAN 56781234
-#if defined(__arm__) && !defined(__ARM_EABI__) && (G_BYTE_ORDER == G_LITTLE_ENDIAN)
-#define G_FLOAT_BYTE_ORDER G_ARMFLOAT_ENDIAN
-#else
-#define G_FLOAT_BYTE_ORDER G_BYTE_ORDER
-#endif
-
 gboolean
 gsf_debug_flag (const char *flag)
 {
@@ -361,7 +350,7 @@ gsf_le_get_guint64 (void const *p)
 float
 gsf_le_get_float (void const *p)
 {
-#if G_FLOAT_BYTE_ORDER == G_BIG_ENDIAN
+#if G_BYTE_ORDER == G_BIG_ENDIAN
 	if (sizeof (float) == 4) {
 		float   f;
 		int     i;
@@ -376,7 +365,7 @@ gsf_le_get_float (void const *p)
 	} else {
 		g_error ("Big endian machine, but weird size of floats");
 	}
-#elif (G_FLOAT_BYTE_ORDER == G_LITTLE_ENDIAN) || (G_FLOAT_BYTE_ORDER == G_ARMFLOAT_ENDIAN)
+#elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 	if (sizeof (float) == 4) {
 		/*
 		 * On i86, we could access directly, but Alphas require
@@ -403,7 +392,7 @@ gsf_le_get_float (void const *p)
 void
 gsf_le_set_float (void *p, float f)
 {
-#if G_FLOAT_BYTE_ORDER == G_BIG_ENDIAN
+#if G_BYTE_ORDER == G_BIG_ENDIAN
 	if (sizeof (float) == 4) {
 		int     i;
 		guint8 *t  = (guint8 *)&f;
@@ -415,7 +404,7 @@ gsf_le_set_float (void *p, float f)
 	} else {
 		g_error ("Big endian machine, but weird size of floats");
 	}
-#elif (G_FLOAT_BYTE_ORDER == G_LITTLE_ENDIAN) || (G_FLOAT_BYTE_ORDER == G_ARMFLOAT_ENDIAN)
+#elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 	if (sizeof (float) == 4) {
 		/*
 		 * On i86, we could access directly, but Alphas require
@@ -441,12 +430,7 @@ gsf_le_set_float (void *p, float f)
 double
 gsf_le_get_double (void const *p)
 {
-#if G_FLOAT_BYTE_ORDER == G_ARMFLOAT_ENDIAN
-	double data;
-	memcpy ((char *)&data + 4, p, 4);
-	memcpy ((char *)&data, (char const *)p + 4, 4);
-	return data;
-#elif G_FLOAT_BYTE_ORDER == G_BIG_ENDIAN
+#if G_BYTE_ORDER == G_BIG_ENDIAN
 	if (sizeof (double) == 8) {
 		double  d;
 		int     i;
@@ -461,7 +445,7 @@ gsf_le_get_double (void const *p)
 	} else {
 		g_error ("Big endian machine, but weird size of doubles");
 	}
-#elif G_FLOAT_BYTE_ORDER == G_LITTLE_ENDIAN
+#elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 	if (sizeof (double) == 8) {
 		/*
 		 * On i86, we could access directly, but Alphas require
@@ -488,10 +472,7 @@ gsf_le_get_double (void const *p)
 void
 gsf_le_set_double (void *p, double d)
 {
-#if G_FLOAT_BYTE_ORDER == G_ARMFLOAT_ENDIAN
-	memcpy (p, (char const *)&d + 4, 4);
-	memcpy ((char *)p + 4, &d, 4);
-#elif G_FLOAT_BYTE_ORDER == G_BIG_ENDIAN
+#if G_BYTE_ORDER == G_BIG_ENDIAN
 	if (sizeof (double) == 8) {
 		int     i;
 		guint8 *t  = (guint8 *)&d;
@@ -503,7 +484,7 @@ gsf_le_set_double (void *p, double d)
 	} else {
 		g_error ("Big endian machine, but weird size of doubles");
 	}
-#elif G_FLOAT_BYTE_ORDER == G_LITTLE_ENDIAN
+#elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 	if (sizeof (double) == 8) {
 		/*
 		 * On i86, we could access directly, but Alphas require
