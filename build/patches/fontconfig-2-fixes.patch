This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 13 Feb 2020 16:00:00 +0100
Subject: [PATCH 1/4] Ignore an error when loading the default config file

This error can be safely ignored since Windows doesn't ship
a fonts.conf file. It can also be disabled by setting the
"FONTCONFIG_PATH" environment variable, but that is kinda
awkward on Windows. The default fallback config file loaded
from memory fits our needs anyway.

diff --git a/src/fcxml.c b/src/fcxml.c
index 1111111..2222222 100644
--- a/src/fcxml.c
+++ b/src/fcxml.c
@@ -3686,8 +3686,6 @@ bail0:
     {
 	if (name)
 	    FcConfigMessage (0, FcSevereError, "Cannot %s config file \"%s\": %s", load ? "load" : "scan", name, FcStrBufDoneStatic (&reason));
-	else
-	    FcConfigMessage (0, FcSevereError, "Cannot %s default config file: %s", load ? "load" : "scan", FcStrBufDoneStatic (&reason));
 	FcStrBufDestroy (&reason);
 	return FcFalse;
     }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Akira TAGOH <akira@tagoh.org>
Date: Wed, 25 Aug 2021 15:52:53 +0900
Subject: [PATCH 2/4] Fix a memory leak when trying to open a non-existing file

https://bugzilla.redhat.com/show_bug.cgi?id=1914716

Upstream-Status: Accepted [https://gitlab.freedesktop.org/fontconfig/fontconfig/-/commit/57032f489b2cbe98c8e7927f4c18738869831f41]

diff --git a/src/fccache.c b/src/fccache.c
index 1111111..2222222 100644
--- a/src/fccache.c
+++ b/src/fccache.c
@@ -1111,7 +1111,7 @@ FcCache *
 FcDirCacheLoadFile (const FcChar8 *cache_file, struct stat *file_stat)
 {
     int	fd;
-    FcCache *cache;
+    FcCache *cache = NULL;
     struct stat	my_file_stat;
     FcConfig *config;
 
@@ -1121,11 +1121,13 @@ FcDirCacheLoadFile (const FcChar8 *cache_file, struct stat *file_stat)
     if (!config)
 	return NULL;
     fd = FcDirCacheOpenFile (cache_file, file_stat);
-    if (fd < 0)
-	return NULL;
-    cache = FcDirCacheMapFd (config, fd, file_stat, NULL);
+    if (fd >= 0)
+    {
+	cache = FcDirCacheMapFd (config, fd, file_stat, NULL);
+	close (fd);
+    }
     FcConfigDestroy (config);
-    close (fd);
+
     return cache;
 }
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ben Wagner <bungeman@chromium.org>
Date: Tue, 31 Aug 2021 12:47:48 -0400
Subject: [PATCH 3/4] Free local FcCache lock on contention

If two threads attempt to create the FcCache lock in lock_cache at the
same time, both threads may create and initialize a local FcMutex. One
thread will atomically make cache_lock point to its FcMutex. The other
thread currently calls FcMutexFinish on the local lock, but does not
free it. Change this behavior to free the unused lock.

Found with test/test-pthread on an LeakSanitizer enabled build.

Upstream-Status: Accepted [https://gitlab.freedesktop.org/fontconfig/fontconfig/-/commit/efc71a3c132be05461ffc872e70390d61f27bc7e]

diff --git a/src/fccache.c b/src/fccache.c
index 1111111..2222222 100644
--- a/src/fccache.c
+++ b/src/fccache.c
@@ -495,6 +495,7 @@ retry:
     FcMutexInit (lock);
     if (!fc_atomic_ptr_cmpexch (&cache_lock, NULL, lock)) {
       FcMutexFinish (lock);
+      free (lock);
       goto retry;
     }
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Akira TAGOH <akira@tagoh.org>
Date: Mon, 31 Jan 2022 19:03:29 +0900
Subject: [PATCH 4/4] Fix possible memory leaks in FcPatternObjectAddWithBinding

Reported by Ruth Ivimey-Cook

Fixes https://gitlab.freedesktop.org/fontconfig/fontconfig/-/issues/302

Upstream-Status: Accepted [https://gitlab.freedesktop.org/fontconfig/fontconfig/-/commit/875878efb7ddd57303b75320b4ea10ee2b9cf370]

diff --git a/src/fcpat.c b/src/fcpat.c
index 1111111..2222222 100644
--- a/src/fcpat.c
+++ b/src/fcpat.c
@@ -142,27 +142,7 @@ FcValueListDestroy (FcValueListPtr l)
     FcValueListPtr next;
     for (; l; l = next)
     {
-	switch ((int) l->value.type) {
-	case FcTypeString:
-	    FcFree (l->value.u.s);
-	    break;
-	case FcTypeMatrix:
-	    FcMatrixFree ((FcMatrix *)l->value.u.m);
-	    break;
-	case FcTypeCharSet:
-	    FcCharSetDestroy
-		((FcCharSet *) (l->value.u.c));
-	    break;
-	case FcTypeLangSet:
-	    FcLangSetDestroy
-		((FcLangSet *) (l->value.u.l));
-	    break;
-	case FcTypeRange:
-	    FcRangeDestroy ((FcRange *) (l->value.u.r));
-	    break;
-	default:
-	    break;
-	}
+	FcValueDestroy (l->value);
 	next = FcValueListNext(l);
 	free(l);
     }
@@ -708,30 +688,29 @@ FcPatternObjectAddWithBinding  (FcPattern	*p,
     if (!new)
 	goto bail0;
 
-    value = FcValueSave (value);
-    if (value.type == FcTypeVoid)
+    new->value = FcValueSave (value);
+    new->binding = binding;
+    new->next = NULL;
+
+    if (new->value.type == FcTypeVoid)
 	goto bail1;
 
     /*
      * Make sure the stored type is valid for built-in objects
      */
-    if (!FcObjectValidType (object, value.type))
+    if (!FcObjectValidType (object, new->value.type))
     {
 	fprintf (stderr,
 		 "Fontconfig warning: FcPattern object %s does not accept value",
 		 FcObjectName (object));
-	FcValuePrintFile (stderr, value);
+	FcValuePrintFile (stderr, new->value);
 	fprintf (stderr, "\n");
 	goto bail1;
     }
 
-    new->value = value;
-    new->binding = binding;
-    new->next = NULL;
-
     e = FcPatternObjectInsertElt (p, object);
     if (!e)
-	goto bail2;
+	goto bail1;
 
     if (append)
     {
@@ -747,10 +726,8 @@ FcPatternObjectAddWithBinding  (FcPattern	*p,
 
     return FcTrue;
 
-bail2:
-    FcValueDestroy (value);
 bail1:
-    free (new);
+    FcValueListDestroy (new);
 bail0:
     return FcFalse;
 }
