From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 28 Jun 2022 15:45:17 +0200
Subject: [PATCH 1/2] Set PROJECT_VERSION manually

Upstream-Status: Pending

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1111111..2222222 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,24 +11,8 @@ endif()
 cmake_policy(VERSION ${NIFTI_CMAKE_POLICY_VERSION})
 
 set(NIFTI_HOMEPAGE_URL "https://nifti-imaging.github.io")
-execute_process(COMMAND git "describe" "--tags"
-  OUTPUT_VARIABLE GIT_REPO_VERSION_UNCLEANED
-  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
-
-#Extract the GIT_REPO_VERSION as composed of non-negative integer components,
-# i.e. <major>[.<minor>[.<patch>[.<tweak>]]]
-string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+((beta.*)?(alpha.*)?\\.[0-9]+(\\.g[0-9a-f]+)?)?"
- GIT_REPO_VERSION  "${GIT_REPO_VERSION_UNCLEANED}")
-
-if( NOT GIT_REPO_VERSION )
-  message(NOTE "Invalid git tag does not match required regular expression, "
-               "can not extract version information from '${GIT_REPO_VERSION_UNCLEANED}'")
-  # NOTE: cmake -DGIT_REPO_VERSION:STRING=<major>[.<minor>[.<patch>[.<tweak>]]] can be used
-  #       to set the repo string for non-git repos.
-  set(GIT_REPO_VERSION "0.0.0.0") #Manually set the version string for testing purposes
-endif()
 project(NIFTI
-        VERSION ${GIT_REPO_VERSION}
+        VERSION 3.0.1
         DESCRIPTION "Niftilib is a set of i/o libraries for reading and writing files in the nifti-1 data format. nifti-1 is a binary file format for storing medical image data, e.g. magnetic resonance image (MRI) and functional MRI (fMRI) brain images."
         LANGUAGES C)
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <corentin.noel@collabora.com>
Date: Wed, 2 Feb 2022 18:00:39 +0100
Subject: [PATCH 2/2] Generate pkgconfig files

This allow to easily include the libraries in other projects.

See https://www.freedesktop.org/wiki/Software/pkg-config/ for more information
about what pkg-config is.

Upstream-Status: Submitted [https://github.com/NIFTI-Imaging/nifti_clib/pull/140]

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1111111..2222222 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -56,6 +56,7 @@ set_if_not_defined(NIFTI_INSTALL_RUNTIME_DIR bin)
 set_if_not_defined(NIFTI_INSTALL_LIBRARY_DIR lib)
 set_if_not_defined(NIFTI_INSTALL_ARCHIVE_DIR ${NIFTI_INSTALL_LIBRARY_DIR})
 set_if_not_defined(NIFTI_INSTALL_INCLUDE_DIR include/nifti)
+set_if_not_defined(NIFTI_INSTALL_PKGCONFIG_DIR ${NIFTI_INSTALL_LIBRARY_DIR}/pkgconfig)
 set_if_not_defined(NIFTI_INSTALL_MAN_DIR share/man/man1)
 set_if_not_defined(NIFTI_INSTALL_DOC_DIR share/doc/${PROJECT_NAME})
 set_if_not_defined(NIFTI_ZLIB_LIBRARIES "")
diff --git a/cmake/nifti_macros.cmake b/cmake/nifti_macros.cmake
index 1111111..2222222 100644
--- a/cmake/nifti_macros.cmake
+++ b/cmake/nifti_macros.cmake
@@ -135,6 +135,10 @@ function(install_nifti_target target_name)
           COMPONENT Development
             INCLUDES DESTINATION ${NIFTI_INSTALL_INCLUDE_DIR}
           )
+
+  install(FILES $<TARGET_PROPERTY:${target_name},PKG_CONFIG>
+          COMPONENT Development
+          DESTINATION ${NIFTI_INSTALL_PKGCONFIG_DIR})
 endfunction()
 
 function(get_lib_version_var ver_header_text ver_type version_out)
diff --git a/nifti2/CMakeLists.txt b/nifti2/CMakeLists.txt
index 1111111..2222222 100644
--- a/nifti2/CMakeLists.txt
+++ b/nifti2/CMakeLists.txt
@@ -2,11 +2,13 @@ set(NIFTI_NIFTILIB2_NAME ${NIFTI_PACKAGE_PREFIX}nifti2)
 
 add_nifti_library(${NIFTI_NIFTILIB2_NAME} nifti2_io.c )
 target_link_libraries( ${NIFTI_NIFTILIB2_NAME} PUBLIC ${NIFTI_PACKAGE_PREFIX}znz ${NIFTI_SYSTEM_MATH_LIB})
+configure_file(nifti2.pc.in nifti2.pc @ONLY)
 set_target_properties(
   ${NIFTI_NIFTILIB2_NAME}
   PROPERTIES
     PUBLIC_HEADER
     "${CMAKE_CURRENT_LIST_DIR}/nifti1.h;${CMAKE_CURRENT_LIST_DIR}/nifti2.h;${CMAKE_CURRENT_LIST_DIR}/nifti2_io.h"
+    PKG_CONFIG ${CMAKE_CURRENT_BINARY_DIR}/nifti2.pc
   )
 # Set library version when building shared libs.
 if(BUILD_SHARED_LIBS)
diff --git a/nifti2/nifti2.pc.in b/nifti2/nifti2.pc.in
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/nifti2/nifti2.pc.in
@@ -0,0 +1,11 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=${prefix}
+libdir=${prefix}/@NIFTI_INSTALL_LIBRARY_DIR@
+includedir=${prefix}/@NIFTI_INSTALL_INCLUDE_DIR@
+
+Name: nifti2
+Description: Core i/o routines for reading and writing nifti-2 format files
+Version: @PROJECT_VERSION@
+Requires: znzlib
+Libs: -L${libdir} -lnifti2
+Cflags: -I${includedir}
diff --git a/nifticdf/CMakeLists.txt b/nifticdf/CMakeLists.txt
index 1111111..2222222 100644
--- a/nifticdf/CMakeLists.txt
+++ b/nifticdf/CMakeLists.txt
@@ -1,11 +1,13 @@
 set(NIFTI_CDFLIB_NAME ${NIFTI_PACKAGE_PREFIX}nifticdf)
 
 add_nifti_library(${NIFTI_CDFLIB_NAME} nifticdf.c )
+configure_file(nifticdf.pc.in nifticdf.pc @ONLY)
 set_target_properties(
   ${NIFTI_CDFLIB_NAME}
   PROPERTIES
     PUBLIC_HEADER
     "${CMAKE_CURRENT_LIST_DIR}/nifticdf.h"
+    PKG_CONFIG ${CMAKE_CURRENT_BINARY_DIR}/nifticdf.pc
   )
 target_compile_options(${NIFTI_CDFLIB_NAME} PRIVATE "-D__COMPILE_UNUSED_FUNCTIONS__")
 target_link_libraries(${NIFTI_CDFLIB_NAME} PUBLIC ${NIFTI_PACKAGE_PREFIX}niftiio)
diff --git a/nifticdf/nifticdf.pc.in b/nifticdf/nifticdf.pc.in
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/nifticdf/nifticdf.pc.in
@@ -0,0 +1,10 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=${prefix}
+libdir=${prefix}/@NIFTI_INSTALL_LIBRARY_DIR@
+includedir=${prefix}/@NIFTI_INSTALL_INCLUDE_DIR@
+
+Name: nifticdf
+Description: Functions to compute cumulative distributions and their inverses
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lnifticdf
+Cflags: -I${includedir}
diff --git a/niftilib/CMakeLists.txt b/niftilib/CMakeLists.txt
index 1111111..2222222 100644
--- a/niftilib/CMakeLists.txt
+++ b/niftilib/CMakeLists.txt
@@ -2,11 +2,13 @@ set(NIFTI_NIFTILIB_NAME ${NIFTI_PACKAGE_PREFIX}niftiio)
 
 add_nifti_library(${NIFTI_NIFTILIB_NAME} nifti1_io.c )
 target_link_libraries( ${NIFTI_NIFTILIB_NAME} PUBLIC ${NIFTI_PACKAGE_PREFIX}znz ${NIFTI_SYSTEM_MATH_LIB})
+configure_file(niftiio.pc.in niftiio.pc @ONLY)
 set_target_properties(
   ${NIFTI_NIFTILIB_NAME}
   PROPERTIES
     PUBLIC_HEADER
       "${CMAKE_CURRENT_LIST_DIR}/nifti1_io.h;${CMAKE_CURRENT_LIST_DIR}/nifti1.h"
+    PKG_CONFIG ${CMAKE_CURRENT_BINARY_DIR}/niftiio.pc
   )
 # Set library version when building shared libs.
 if(BUILD_SHARED_LIBS)
diff --git a/niftilib/niftiio.pc.in b/niftilib/niftiio.pc.in
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/niftilib/niftiio.pc.in
@@ -0,0 +1,11 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=${prefix}
+libdir=${prefix}/@NIFTI_INSTALL_LIBRARY_DIR@
+includedir=${prefix}/@NIFTI_INSTALL_INCLUDE_DIR@
+
+Name: niftiio
+Description: Core i/o routines for reading and writing nifti-1 format files
+Version: @PROJECT_VERSION@
+Requires: znzlib
+Libs: -L${libdir} -lniftiio
+Cflags: -I${includedir}
diff --git a/znzlib/CMakeLists.txt b/znzlib/CMakeLists.txt
index 1111111..2222222 100644
--- a/znzlib/CMakeLists.txt
+++ b/znzlib/CMakeLists.txt
@@ -2,10 +2,12 @@ set(NIFTI_ZNZLIB_NAME ${NIFTI_PACKAGE_PREFIX}znz)
 
 add_nifti_library(${NIFTI_ZNZLIB_NAME} znzlib.c )
 target_link_libraries( ${NIFTI_ZNZLIB_NAME} PUBLIC ${NIFTI_ZLIB_LIBRARIES} )
+configure_file(znzlib.pc.in znzlib.pc @ONLY)
 set_target_properties(
   ${NIFTI_ZNZLIB_NAME}
   PROPERTIES
     PUBLIC_HEADER ${CMAKE_CURRENT_LIST_DIR}/znzlib.h
+    PKG_CONFIG ${CMAKE_CURRENT_BINARY_DIR}/znzlib.pc
     )
 target_compile_definitions(${NIFTI_ZNZLIB_NAME} PUBLIC  ${ZNZ_COMPILE_DEF})
 # Set library version if building shared libs.
diff --git a/znzlib/znzlib.pc.in b/znzlib/znzlib.pc.in
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/znzlib/znzlib.pc.in
@@ -0,0 +1,12 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=${prefix}
+libdir=${prefix}/@NIFTI_INSTALL_LIBRARY_DIR@
+includedir=${prefix}/@NIFTI_INSTALL_INCLUDE_DIR@
+zlib_support=true
+
+Name: znzlib
+Description: Low level library for handling read/write of compressed files
+Version: @PROJECT_VERSION@
+Requires: zlib
+Libs: -L${libdir} -lznz
+Cflags: -I${includedir}
