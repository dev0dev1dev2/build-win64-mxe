From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lovell Fuller <github@lovell.info>
Date: Fri, 7 May 2021 21:43:51 +0100
Subject: [PATCH 1/3] aom encoder: improve performance by ~2x using new 'all intra'
 mode

Available from aom v3.1.0, this usage mode is considered the
default setting for still images.

It uses a single pass and removes all keyframe logic, resulting
in significantly fewer memory allocations and halves CPU time.

libavif has already adopted this as the default.

diff --git a/libheif/heif_encoder_aom.cc b/libheif/heif_encoder_aom.cc
index 1111111..2222222 100644
--- a/libheif/heif_encoder_aom.cc
+++ b/libheif/heif_encoder_aom.cc
@@ -696,7 +696,10 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
 
 
   unsigned int aomUsage = 0;
-#if defined(AOM_USAGE_REALTIME)
+#if defined(AOM_USAGE_ALL_INTRA)
+  // aom 3.1.0
+  aomUsage = (encoder->realtime_mode ? AOM_USAGE_REALTIME : AOM_USAGE_ALL_INTRA);
+#elif defined(AOM_USAGE_REALTIME)
   // aom 2.0
   aomUsage = (encoder->realtime_mode ? AOM_USAGE_REALTIME : AOM_USAGE_GOOD_QUALITY);
 #endif

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lovell Fuller <github@lovell.info>
Date: Sat, 8 May 2021 10:02:18 +0100
Subject: [PATCH 2/3] aom: expose decoder error messages


diff --git a/libheif/heif_decoder_aom.cc b/libheif/heif_decoder_aom.cc
index 1111111..2222222 100644
--- a/libheif/heif_decoder_aom.cc
+++ b/libheif/heif_decoder_aom.cc
@@ -97,7 +97,7 @@ struct heif_error aom_new_decoder(void** dec)
 
     delete decoder;
 
-    struct heif_error err = {heif_error_Decoder_plugin_error, heif_suberror_Unspecified, kSuccess};
+    struct heif_error err = {heif_error_Decoder_plugin_error, heif_suberror_Unspecified, aom_codec_err_to_string(aomerr)};
     return err;
   }
 
@@ -133,7 +133,7 @@ struct heif_error aom_push_data(void* decoder_raw, const void* frame_data, size_
   aom_codec_err_t aomerr;
   aomerr = aom_codec_decode(&decoder->codec, (const uint8_t*) frame_data, frame_size, NULL);
   if (aomerr) {
-    struct heif_error err = {heif_error_Invalid_input, heif_suberror_Unspecified, kSuccess};
+    struct heif_error err = {heif_error_Invalid_input, heif_suberror_Unspecified, aom_codec_err_to_string(aomerr)};
     return err;
   }
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lovell Fuller <github@lovell.info>
Date: Thu, 13 May 2021 09:37:26 +0100
Subject: [PATCH 3/3] Detect and prevent negative overflow of clap box dimensions
 in the 32-bit unsigned to signed conversion, which can cause a divide-by-zero
 floating point exception when rounded.

diff --git a/libheif/box.cc b/libheif/box.cc
index 1111111..2222222 100644
--- a/libheif/box.cc
+++ b/libheif/box.cc
@@ -2306,6 +2306,10 @@ Error Box_clap::parse(BitstreamRange& range)
   int32_t horizontal_offset_den = range.read32();
   int32_t vertical_offset_num = range.read32();
   int32_t vertical_offset_den = range.read32();
+  if (clean_aperture_width_num < 0 || clean_aperture_width_den < 0 ||
+      clean_aperture_height_num < 0 || clean_aperture_height_den < 0) {
+    return Error(heif_error_Invalid_input, heif_suberror_Invalid_image_size);
+  }
   m_clean_aperture_width = Fraction(clean_aperture_width_num,
                                     clean_aperture_width_den);
   m_clean_aperture_height = Fraction(clean_aperture_height_num,
