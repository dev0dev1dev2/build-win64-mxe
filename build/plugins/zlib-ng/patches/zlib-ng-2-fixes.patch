This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 30 Jul 2019 16:30:00 +0200
Subject: [PATCH 1/2] Fix DLL naming (libzlib.dll -> libz.dll)


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1111111..2222222 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1094,7 +1094,12 @@ endforeach()
 if(WIN32)
     # Shared library
     if(NOT DEFINED BUILD_SHARED_LIBS OR BUILD_SHARED_LIBS)
-        set_target_properties(zlib PROPERTIES OUTPUT_NAME zlib${SUFFIX})
+        if(MINGW)
+            # When cross-compiling with MinGW-w64, we want to make libz, not libzlib
+            set_target_properties(${ZLIB_INSTALL_LIBRARIES} PROPERTIES OUTPUT_NAME z${SUFFIX})
+        else()
+            set_target_properties(${ZLIB_INSTALL_LIBRARIES} PROPERTIES OUTPUT_NAME zlib${SUFFIX})
+        endif()
     endif()
     # Static library
     if(NOT DEFINED BUILD_SHARED_LIBS)

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 22 Jun 2023 18:15:57 +0200
Subject: [PATCH 2/2] Fix build error on llvm-mingw (targeting ARM64)

llvm-mingw doesn't provide arm64_neon.h and clang-cl can work with
arm_neon.h natively.

Details:
arch/arm/neon_intrins.h:5:12: fatal error: 'arm64_neon.h' file not found
#  include <arm64_neon.h>
           ^~~~~~~~~~~~~~

Upstream-Status: Pending

diff --git a/arch/arm/neon_intrins.h b/arch/arm/neon_intrins.h
index 1111111..2222222 100644
--- a/arch/arm/neon_intrins.h
+++ b/arch/arm/neon_intrins.h
@@ -1,7 +1,7 @@
 #ifndef ARM_NEON_INTRINS_H
 #define ARM_NEON_INTRINS_H
 
-#ifdef _M_ARM64
+#if defined(_MSC_VER) && defined(_M_ARM64) && !defined(__clang__)
 #  include <arm64_neon.h>
 #else
 #  include <arm_neon.h>
diff --git a/cmake/detect-intrinsics.cmake b/cmake/detect-intrinsics.cmake
index 1111111..2222222 100644
--- a/cmake/detect-intrinsics.cmake
+++ b/cmake/detect-intrinsics.cmake
@@ -176,7 +176,7 @@ macro(check_neon_compiler_flag)
     # Check whether compiler supports NEON flag
     set(CMAKE_REQUIRED_FLAGS "${NEONFLAG} ${NATIVEFLAG}")
     check_c_source_compiles(
-        "#ifdef _M_ARM64
+        "#if defined(_MSC_VER) && defined(_M_ARM64) && !defined(__clang__)
         #  include <arm64_neon.h>
         #else
         #  include <arm_neon.h>
@@ -199,7 +199,7 @@ macro(check_neon_ld4_intrinsics)
     # Check whether compiler supports loading 4 neon vecs into a register range
     set(CMAKE_REQUIRED_FLAGS "${NEONFLAG}")
     check_c_source_compiles(
-        "#ifdef _M_ARM64
+        "#if defined(_MSC_VER) && defined(_M_ARM64) && !defined(__clang__)
         #  include <arm64_neon.h>
         #else
         #  include <arm_neon.h>
diff --git a/configure b/configure
index 1111111..2222222 100644
--- a/configure
+++ b/configure
@@ -1200,7 +1200,7 @@ EOF
 check_neon_compiler_flag() {
     # Check whether -mfpu=neon is available on ARM processors.
     cat > $test.c << EOF
-#ifdef _M_ARM64
+#if defined(_MSC_VER) && defined(_M_ARM64) && !defined(__clang__)
  #  include <arm64_neon.h>
  #else
  #  include <arm_neon.h>
@@ -1225,7 +1225,7 @@ check_neon_ld4_intrinsics() {
         fi
     fi
     cat > $test.c << EOF
-#ifdef _M_ARM64
+#if defined(_MSC_VER) && defined(_M_ARM64) && !defined(__clang__)
 #  include <arm64_neon.h>
 #else
 #  include <arm_neon.h>
