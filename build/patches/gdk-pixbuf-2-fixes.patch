This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 13 Oct 2020 16:30:00 +0200
Subject: [PATCH 1/3] Avoid multiple definitions of DllMain in static builds


diff --git a/gdk-pixbuf/gdk-pixbuf-io.c b/gdk-pixbuf/gdk-pixbuf-io.c
index 1111111..2222222 100644
--- a/gdk-pixbuf/gdk-pixbuf-io.c
+++ b/gdk-pixbuf/gdk-pixbuf-io.c
@@ -188,6 +188,7 @@ get_file_formats (void)
 
 static HMODULE gdk_pixbuf_dll;
 
+#ifdef DLL_EXPORT
 BOOL WINAPI
 DllMain (HINSTANCE hinstDLL,
          DWORD     fdwReason,
@@ -202,6 +203,7 @@ DllMain (HINSTANCE hinstDLL,
   return TRUE;
 }
 #endif
+#endif
 
 
 #ifdef GDK_PIXBUF_RELOCATABLE

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 13 Oct 2020 16:40:45 +0200
Subject: [PATCH 2/3] Don't force relocation support on Windows

We don't use loadable modules for gdk-pixbuf.

diff --git a/gdk-pixbuf/gdk-pixbuf-io.c b/gdk-pixbuf/gdk-pixbuf-io.c
index 1111111..2222222 100644
--- a/gdk-pixbuf/gdk-pixbuf-io.c
+++ b/gdk-pixbuf/gdk-pixbuf-io.c
@@ -182,7 +182,7 @@ get_file_formats (void)
         return file_formats;
 }
 
-#ifdef G_OS_WIN32
+#if defined(G_OS_WIN32) && defined(GDK_PIXBUF_RELOCATABLE)
 
 /* DllMain function needed to tuck away the gdk-pixbuf DLL handle */
 
diff --git a/gdk-pixbuf/queryloaders.c b/gdk-pixbuf/queryloaders.c
index 1111111..2222222 100644
--- a/gdk-pixbuf/queryloaders.c
+++ b/gdk-pixbuf/queryloaders.c
@@ -280,7 +280,7 @@ query_module (GString *contents, const char *dir, const char *file)
         g_free (path);
 }
 
-#ifdef G_OS_WIN32
+#if defined(G_OS_WIN32) && defined(GDK_PIXBUF_RELOCATABLE)
 
 static char *
 get_libdir (void)
diff --git a/meson.build b/meson.build
index 1111111..2222222 100644
--- a/meson.build
+++ b/meson.build
@@ -379,15 +379,8 @@ if get_option('tiff') and not native_windows_loaders
   endif
 endif
 
-# Determine whether we enable application bundle relocation support, and we use
-# this always on Windows
-if host_system == 'windows'
-  relocatable = true
-else
-  relocatable = get_option('relocatable')
-endif
-
-if relocatable
+# Determine whether we enable application bundle relocation support
+if get_option('relocatable')
   add_project_arguments([ '-DGDK_PIXBUF_RELOCATABLE' ], language: 'c')
 endif
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 7 Oct 2019 11:30:00 +0200
Subject: [PATCH 3/3] Fix pkg-config file when using built-in loader(s)

See: https://gitlab.gnome.org/GNOME/gdk-pixbuf/merge_requests/50

diff --git a/meson.build b/meson.build
index 1111111..2222222 100644
--- a/meson.build
+++ b/meson.build
@@ -293,6 +293,9 @@ if not png_opt.disabled()
   if png_dep.found()
     enabled_loaders += 'png'
     loaders_deps += png_dep
+    if builtin_loaders.contains('png') or builtin_all_loaders
+      gdk_pixbuf_deps += png_dep
+    endif
   endif
 endif
 
@@ -307,9 +310,13 @@ else
 endif
 
 if native_windows_loaders
-  loaders_deps += cc.find_library('gdiplus')
-  loaders_deps += cc.find_library('ole32')
+  gdip_lib = cc.find_library('gdiplus')
+  ole32_lib = cc.find_library('ole32')
+  loaders_deps += [gdip_lib, ole32_lib]
   enabled_loaders += 'gdiplus'
+  if builtin_loaders.contains('gdiplus') or builtin_all_loaders
+    gdk_pixbuf_deps += [gdip_lib, ole32_lib]
+  endif
 endif
 
 # Don't check and build the jpeg loader if native_windows_loaders is true
@@ -349,6 +356,9 @@ if not jpeg_opt.disabled() and not native_windows_loaders
     if has_destroy_decompress and has_simple_progression
       gdk_pixbuf_conf.set('HAVE_PROGRESSIVE_JPEG', has_simple_progression)
     endif
+    if builtin_loaders.contains('jpeg') or builtin_all_loaders
+      gdk_pixbuf_deps += jpeg_dep
+    endif
   endif
 endif
 
@@ -376,6 +386,9 @@ if not tiff_opt.disabled() and not native_windows_loaders
   if tiff_dep.found()
     enabled_loaders += 'tiff'
     loaders_deps += tiff_dep
+    if builtin_loaders.contains('tiff') or builtin_all_loaders
+      gdk_pixbuf_deps += tiff_dep
+    endif
   endif
 endif
 
