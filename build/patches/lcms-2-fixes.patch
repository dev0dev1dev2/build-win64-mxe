From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 4 Jun 2021 12:12:02 +0200
Subject: [PATCH 1/3] Ensure threadsafe alternative of gmtime is used


diff --git a/configure.ac b/configure.ac
index 1111111..2222222 100644
--- a/configure.ac
+++ b/configure.ac
@@ -80,6 +80,9 @@ AX_APPEND_COMPILE_FLAGS(["-fvisibility=hidden"])
 # Motorola and SPARC CPUs), define `WORDS_BIGENDIAN'.
 AC_C_BIGENDIAN
 
+# Check for functions that some compilers lack (or name differently)
+AC_CHECK_FUNCS([gmtime_r _gmtime64_s])
+
 # Point to JPEG installed in DIR or disable JPEG with --without-jpeg.
 AC_ARG_WITH(jpeg,
             AS_HELP_STRING([--with-jpeg=DIR],[use jpeg installed in DIR]),
diff --git a/src/cmsio0.c b/src/cmsio0.c
index 1111111..2222222 100644
--- a/src/cmsio0.c
+++ b/src/cmsio0.c
@@ -488,6 +488,10 @@ cmsIOHANDLER* CMSEXPORT cmsGetProfileIOhandler(cmsHPROFILE hProfile)
 // Creates an empty structure holding all required parameters
 cmsHPROFILE CMSEXPORT cmsCreateProfilePlaceholder(cmsContext ContextID)
 {
+    struct tm *t;
+#if defined(HAVE_GMTIME_R) || defined(HAVE__GMTIME64_S)
+    struct tm tm;
+#endif
     time_t now = time(NULL);
     _cmsICCPROFILE* Icc = (_cmsICCPROFILE*) _cmsMallocZero(ContextID, sizeof(_cmsICCPROFILE));
     if (Icc == NULL) return NULL;
@@ -500,14 +504,27 @@ cmsHPROFILE CMSEXPORT cmsCreateProfilePlaceholder(cmsContext ContextID)
     // Set default version
     Icc ->Version =  0x02100000;
 
+#ifdef HAVE_GMTIME_R
+    t = gmtime_r(&now, &tm);
+#elif defined(HAVE__GMTIME64_S)
+    t = _gmtime64_s(&tm, &now) == 0 ? &tm : NULL;
+#else
+    t = gmtime(&now);
+#endif
+    if (t == NULL) goto Error;
+
     // Set creation date/time
-    memmove(&Icc ->Created, gmtime(&now), sizeof(Icc ->Created));
+    memmove(&Icc ->Created, t, sizeof(Icc ->Created));
 
     // Create a mutex if the user provided proper plugin. NULL otherwise
     Icc ->UsrMutex = _cmsCreateMutex(ContextID);
 
     // Return the handle
     return (cmsHPROFILE) Icc;
+
+Error:
+    _cmsFree(ContextID, Icc);
+    return NULL;
 }
 
 cmsContext CMSEXPORT cmsGetProfileContextID(cmsHPROFILE hProfile)

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Marti Maria <marti.maria@littlecms.com>
Date: Wed, 9 Jun 2021 20:45:45 +0200
Subject: [PATCH 2/3] Provide a thread-safe get time function

Use the context pool mutex in the case of none of the re-entrant alternatives to gmtime() is available

diff --git a/src/cmsio0.c b/src/cmsio0.c
index 1111111..2222222 100644
--- a/src/cmsio0.c
+++ b/src/cmsio0.c
@@ -488,11 +488,6 @@ cmsIOHANDLER* CMSEXPORT cmsGetProfileIOhandler(cmsHPROFILE hProfile)
 // Creates an empty structure holding all required parameters
 cmsHPROFILE CMSEXPORT cmsCreateProfilePlaceholder(cmsContext ContextID)
 {
-    struct tm *t;
-#if defined(HAVE_GMTIME_R) || defined(HAVE__GMTIME64_S)
-    struct tm tm;
-#endif
-    time_t now = time(NULL);
     _cmsICCPROFILE* Icc = (_cmsICCPROFILE*) _cmsMallocZero(ContextID, sizeof(_cmsICCPROFILE));
     if (Icc == NULL) return NULL;
 
@@ -503,18 +498,10 @@ cmsHPROFILE CMSEXPORT cmsCreateProfilePlaceholder(cmsContext ContextID)
 
     // Set default version
     Icc ->Version =  0x02100000;
-
-#ifdef HAVE_GMTIME_R
-    t = gmtime_r(&now, &tm);
-#elif defined(HAVE__GMTIME64_S)
-    t = _gmtime64_s(&tm, &now) == 0 ? &tm : NULL;
-#else
-    t = gmtime(&now);
-#endif
-    if (t == NULL) goto Error;
-
+    
     // Set creation date/time
-    memmove(&Icc ->Created, t, sizeof(Icc ->Created));
+    if (!_cmsGetTime(&Icc->Created))
+        goto Error;
 
     // Create a mutex if the user provided proper plugin. NULL otherwise
     Icc ->UsrMutex = _cmsCreateMutex(ContextID);
diff --git a/src/cmsplugin.c b/src/cmsplugin.c
index 1111111..2222222 100644
--- a/src/cmsplugin.c
+++ b/src/cmsplugin.c
@@ -989,3 +989,30 @@ void* CMSEXPORT cmsGetContextUserData(cmsContext ContextID)
 }
 
 
+// Use context mutex to provide thread-safe time
+cmsBool _cmsGetTime(struct tm* ptr_time)
+{
+    struct tm* t;
+#if defined(HAVE_GMTIME_R) || defined(HAVE__GMTIME64_S)
+    struct tm tm;
+#endif
+
+    time_t now = time(NULL);
+
+#ifdef HAVE_GMTIME_R
+    t = gmtime_r(&now, &tm);
+#elif defined(HAVE__GMTIME64_S)
+    t = _gmtime64_s(&tm, &now) == 0 ? &tm : NULL;
+#else
+    _cmsEnterCriticalSectionPrimitive(&_cmsContextPoolHeadMutex);
+    t = gmtime(&now);
+    _cmsLeaveCriticalSectionPrimitive(&_cmsContextPoolHeadMutex);
+#endif
+
+    if (t == NULL) 
+        return FALSE;
+    else {
+        *ptr_time = *t;
+        return TRUE;
+    }
+}
diff --git a/src/lcms2_internal.h b/src/lcms2_internal.h
index 1111111..2222222 100644
--- a/src/lcms2_internal.h
+++ b/src/lcms2_internal.h
@@ -1118,5 +1118,8 @@ cmsBool   _cmsAdaptationMatrix(cmsMAT3* r, const cmsMAT3* ConeMatrix, const cmsC
 cmsBool   _cmsBuildRGB2XYZtransferMatrix(cmsMAT3* r, const cmsCIExyY* WhitePoint, const cmsCIExyYTRIPLE* Primaries);
 
 
+// thread-safe gettime
+cmsBool _cmsGetTime(struct tm* ptr_time);
+
 #define _lcms_internal_H
 #endif

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 14 Jul 2021 16:14:27 +0200
Subject: [PATCH 3/3] Prefer to use gmtime_s instead

MinGW-w64 defines _gmtime64_s on both i686 and x86_64 targets.
Prefer to use the gmtime_s macro to avoid that _gmtime64_s is
being called on Windows 32-bit, which will not work.

This commit also generally ensures that a threadsafe alternative
is provided for toolchains targeting Windows i686.

diff --git a/configure.ac b/configure.ac
index 1111111..2222222 100644
--- a/configure.ac
+++ b/configure.ac
@@ -80,8 +80,21 @@ AX_APPEND_COMPILE_FLAGS(["-fvisibility=hidden"])
 # Motorola and SPARC CPUs), define `WORDS_BIGENDIAN'.
 AC_C_BIGENDIAN
 
-# Check for functions that some compilers lack (or name differently)
-AC_CHECK_FUNCS([gmtime_r _gmtime64_s])
+# Check for threadsafe variants of gmtime
+# Note: check for gmtime_s is a bit more complex as it is implemented as a macro
+AC_CHECK_FUNCS(gmtime_r, [], [
+               AC_MSG_CHECKING([for gmtime_s])
+               AC_LINK_IFELSE([
+                 AC_LANG_PROGRAM([[#include <time.h>]], [[
+                   time_t t;
+                   struct tm m;
+                   gmtime_s(&m, &t);
+                   return 0;
+                 ]])],
+                 [AC_MSG_RESULT([yes])
+                  AC_DEFINE([HAVE_GMTIME_S], [1], [gmtime_s can be used])], 
+                 [AC_MSG_RESULT([no])]
+               )])
 
 # Point to JPEG installed in DIR or disable JPEG with --without-jpeg.
 AC_ARG_WITH(jpeg,
diff --git a/src/cmsplugin.c b/src/cmsplugin.c
index 1111111..2222222 100644
--- a/src/cmsplugin.c
+++ b/src/cmsplugin.c
@@ -993,7 +993,7 @@ void* CMSEXPORT cmsGetContextUserData(cmsContext ContextID)
 cmsBool _cmsGetTime(struct tm* ptr_time)
 {
     struct tm* t;
-#if defined(HAVE_GMTIME_R) || defined(HAVE__GMTIME64_S)
+#if defined(HAVE_GMTIME_R) || defined(HAVE_GMTIME_S)
     struct tm tm;
 #endif
 
@@ -1001,8 +1001,8 @@ cmsBool _cmsGetTime(struct tm* ptr_time)
 
 #ifdef HAVE_GMTIME_R
     t = gmtime_r(&now, &tm);
-#elif defined(HAVE__GMTIME64_S)
-    t = _gmtime64_s(&tm, &now) == 0 ? &tm : NULL;
+#elif defined(HAVE_GMTIME_S)
+    t = gmtime_s(&tm, &now) == 0 ? &tm : NULL;
 #else
     _cmsEnterCriticalSectionPrimitive(&_cmsContextPoolHeadMutex);
     t = gmtime(&now);
