This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 28 Nov 2019 12:00:00 +0100
Subject: [PATCH 1/2] Use H5make_libsettings.c from native build


diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 1111111..2222222 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1019,38 +1019,61 @@ else ()
   endif ()
 endif ()
 
-add_executable (H5make_libsettings ${HDF5_SRC_DIR}/H5make_libsettings.c)
-target_include_directories(H5make_libsettings PRIVATE "${HDF5_SRC_DIR};${HDF5_BINARY_DIR};$<$<BOOL:${HDF5_ENABLE_PARALLEL}>:${MPI_C_INCLUDE_DIRS}>")
-target_compile_definitions(H5make_libsettings PUBLIC ${HDF_EXTRA_C_FLAGS} ${HDF_EXTRA_FLAGS})
-TARGET_C_PROPERTIES (H5make_libsettings STATIC)
-target_link_libraries (H5make_libsettings
-    PRIVATE "$<$<BOOL:${HDF5_ENABLE_PARALLEL}>:${MPI_C_LIBRARIES}>" $<$<PLATFORM_ID:Windows>:ws2_32.lib>
-    PRIVATE $<$<PLATFORM_ID:Emscripten>:"-O0">
-)
-
-add_custom_command (
-    OUTPUT ${HDF5_BINARY_DIR}/H5lib_settings.c
-           ${HDF5_BINARY_DIR}/gen_SRCS.stamp2
-    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR}$<TARGET_FILE:H5make_libsettings>
-    ARGS ${HDF5_BINARY_DIR}/H5lib_settings.c
-    COMMAND    ${CMAKE_COMMAND}
-    ARGS       -E touch ${HDF5_GENERATED_SOURCE_DIR}/gen_SRCS.stamp2
-    DEPENDS H5make_libsettings
-    WORKING_DIRECTORY ${HDF5_BINARY_DIR}
-)
-set_source_files_properties (${HDF5_BINARY_DIR}/H5lib_settings.c PROPERTIES GENERATED TRUE)
-if (BUILD_SHARED_LIBS)
+if (NOT EXISTS ${HDF5_BINARY_DIR}/H5lib_settings.c)
+  add_executable (H5make_libsettings ${HDF5_SRC_DIR}/H5make_libsettings.c)
+  target_include_directories(H5make_libsettings PRIVATE "${HDF5_SRC_DIR};${HDF5_BINARY_DIR};$<$<BOOL:${HDF5_ENABLE_PARALLEL}>:${MPI_C_INCLUDE_DIRS}>")
+  target_compile_definitions(H5make_libsettings PUBLIC ${HDF_EXTRA_C_FLAGS} ${HDF_EXTRA_FLAGS})
+  TARGET_C_PROPERTIES (H5make_libsettings STATIC)
+  target_link_libraries (H5make_libsettings
+      PRIVATE "$<$<BOOL:${HDF5_ENABLE_PARALLEL}>:${MPI_C_LIBRARIES}>" $<$<PLATFORM_ID:Windows>:ws2_32.lib>
+      PRIVATE $<$<PLATFORM_ID:Emscripten>:"-O0">
+  )
+  
   add_custom_command (
-      OUTPUT ${HDF5_BINARY_DIR}/shared/H5lib_settings.c
-             ${HDF5_BINARY_DIR}/shared/shared_gen_SRCS.stamp2
+      OUTPUT ${HDF5_BINARY_DIR}/H5lib_settings.c
+             ${HDF5_BINARY_DIR}/gen_SRCS.stamp2
+      COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR}$<TARGET_FILE:H5make_libsettings>
+      ARGS ${HDF5_BINARY_DIR}/H5lib_settings.c
       COMMAND    ${CMAKE_COMMAND}
-      ARGS       -E copy_if_different "${HDF5_BINARY_DIR}/H5lib_settings.c" "${HDF5_BINARY_DIR}/shared/H5lib_settings.c"
+      ARGS       -E touch ${HDF5_BINARY_DIR}/gen_SRCS.stamp2
+      DEPENDS H5make_libsettings
+      WORKING_DIRECTORY ${HDF5_BINARY_DIR}
+  )
+  set_source_files_properties (${HDF5_BINARY_DIR}/H5lib_settings.c PROPERTIES GENERATED TRUE)
+  if (BUILD_SHARED_LIBS)
+    add_custom_command (
+        OUTPUT ${HDF5_BINARY_DIR}/shared/H5lib_settings.c
+               ${HDF5_BINARY_DIR}/shared/shared_gen_SRCS.stamp2
+        COMMAND    ${CMAKE_COMMAND}
+        ARGS       -E copy_if_different "${HDF5_BINARY_DIR}/H5lib_settings.c" "${HDF5_BINARY_DIR}/shared/H5lib_settings.c"
+        COMMAND    ${CMAKE_COMMAND}
+        ARGS       -E touch ${HDF5_BINARY_DIR}/shared/shared_gen_SRCS.stamp2
+        DEPENDS    ${HDF5_BINARY_DIR}/H5lib_settings.c
+        WORKING_DIRECTORY ${HDF5_BINARY_DIR}
+    )
+    set_source_files_properties (${HDF5_BINARY_DIR}/shared/H5lib_settings.c PROPERTIES GENERATED TRUE)
+  endif ()
+else ()
+  add_custom_command (
+      OUTPUT ${HDF5_BINARY_DIR}/gen_SRCS.stamp2
       COMMAND    ${CMAKE_COMMAND}
-      ARGS       -E touch ${HDF5_GENERATED_SOURCE_DIR}/shared/shared_gen_SRCS.stamp2
+      ARGS       -E touch ${HDF5_BINARY_DIR}/gen_SRCS.stamp2
       DEPENDS    ${HDF5_BINARY_DIR}/H5lib_settings.c
       WORKING_DIRECTORY ${HDF5_BINARY_DIR}
   )
-  set_source_files_properties (${HDF5_BINARY_DIR}/shared/H5lib_settings.c PROPERTIES GENERATED TRUE)
+  if (BUILD_SHARED_LIBS)
+    add_custom_command (
+        OUTPUT ${HDF5_BINARY_DIR}/shared/H5lib_settings.c
+               ${HDF5_BINARY_DIR}/shared/shared_gen_SRCS.stamp2
+        COMMAND    ${CMAKE_COMMAND}
+        ARGS       -E copy_if_different "${HDF5_BINARY_DIR}/H5lib_settings.c" "${HDF5_BINARY_DIR}/shared/H5lib_settings.c"
+        COMMAND    ${CMAKE_COMMAND}
+        ARGS       -E touch ${HDF5_BINARY_DIR}/shared/shared_gen_SRCS.stamp2
+        DEPENDS    ${HDF5_BINARY_DIR}/H5lib_settings.c
+        WORKING_DIRECTORY ${HDF5_BINARY_DIR}
+    )
+    set_source_files_properties (${HDF5_BINARY_DIR}/shared/H5lib_settings.c PROPERTIES GENERATED TRUE)
+  endif ()
 endif ()
 
 ## all_packages="AC,B,B2,D,F,FA,FL,FS,HL,I,O,S,ST,T,Z"
@@ -1061,7 +1084,7 @@ option (HDF5_ENABLE_DEBUG_APIS "Turn on extra debug output in all packages" OFF)
 # Add H5Tinit source to build - generated by H5detect/CMake at configure time
 #-----------------------------------------------------------------------------
 set (gen_SRCS ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c ${HDF5_BINARY_DIR}/H5lib_settings.c)
-add_custom_target (gen_${HDF5_LIB_TARGET} ALL DEPENDS ${HDF5_GENERATED_SOURCE_DIR}/gen_SRCS.stamp1 ${HDF5_GENERATED_SOURCE_DIR}/gen_SRCS.stamp2)
+add_custom_target (gen_${HDF5_LIB_TARGET} ALL DEPENDS ${HDF5_GENERATED_SOURCE_DIR}/gen_SRCS.stamp1 ${HDF5_BINARY_DIR}/gen_SRCS.stamp2)
 
 add_library (${HDF5_LIB_TARGET} STATIC ${common_SRCS} ${gen_SRCS} ${H5_PUBLIC_HEADERS} ${H5_PRIVATE_HEADERS} ${H5_GENERATED_HEADERS})
 target_include_directories(${HDF5_LIB_TARGET}

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tom Schoonjans <Tom.Schoonjans@diamond.ac.uk>
Date: Tue, 27 Feb 2018 15:49:30 +0000
Subject: [PATCH 2/2] Restore MSYS/MINGW support


diff --git a/config/cmake_ext_mod/HDFMacros.cmake b/config/cmake_ext_mod/HDFMacros.cmake
index 1111111..2222222 100644
--- a/config/cmake_ext_mod/HDFMacros.cmake
+++ b/config/cmake_ext_mod/HDFMacros.cmake
@@ -117,7 +117,7 @@ macro (HDF_SET_LIB_OPTIONS libtarget libname libtype)
     set (LIB_RELEASE_NAME "${libname}")
     set (LIB_DEBUG_NAME "${libname}${LIB_DEBUG_SUFFIX}")
   else ()
-    if (WIN32)
+    if (WIN32 AND NOT MINGW)
       set (LIB_RELEASE_NAME "lib${libname}")
       set (LIB_DEBUG_NAME "lib${libname}${LIB_DEBUG_SUFFIX}")
     else ()
@@ -151,16 +151,6 @@ macro (HDF_SET_LIB_OPTIONS libtarget libname libtype)
       )
     endif ()
   endif ()
-
-  #----- Use MSVC Naming conventions for Shared Libraries
-  if (MINGW AND ${libtype} MATCHES "SHARED")
-    set_target_properties (${libtarget}
-        PROPERTIES
-        IMPORT_SUFFIX ".lib"
-        IMPORT_PREFIX ""
-        PREFIX ""
-    )
-  endif ()
 endmacro ()
 
 #-------------------------------------------------------------------------------
@@ -180,7 +170,7 @@ macro (HDF_IMPORT_SET_LIB_OPTIONS libtarget libname libtype libversion)
     if (WIN32)
       if (MINGW)
         set_target_properties (${libtarget} PROPERTIES
-            IMPORTED_IMPLIB "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${IMPORT_LIB_NAME}.lib"
+            IMPORTED_IMPLIB "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${IMPORT_LIB_NAME}${CMAKE_IMPORT_LIBRARY_SUFFIX}"
             IMPORTED_LOCATION "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${IMPORT_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}"
         )
       else ()
diff --git a/src/H5system.c b/src/H5system.c
index 1111111..2222222 100644
--- a/src/H5system.c
+++ b/src/H5system.c
@@ -799,6 +799,10 @@ Wgettimeofday(struct timeval *tv, struct timezone *tz)
  *
  *-------------------------------------------------------------------------
  */
+#ifdef H5_HAVE_MINGW
+// definition of getenv_s is currently missing in MinGW, appears to be a bug
+_CRTIMP errno_t __cdecl getenv_s(size_t *pReturnValue, char *buffer, size_t numberOfElements, const char *varname);
+#endif
 int
 Wsetenv(const char *name, const char *value, int overwrite)
 {
diff --git a/src/H5win32defs.h b/src/H5win32defs.h
index 1111111..2222222 100644
--- a/src/H5win32defs.h
+++ b/src/H5win32defs.h
@@ -54,7 +54,12 @@ typedef __int64             h5_stat_size_t;
  * Also note that the variadic macro is using a VC++ extension
  * where the comma is dropped if nothing is passed to the ellipsis.
  */
-#define HDopen(S,F,...)       _open(S, F | _O_BINARY, __VA_ARGS__)
+#ifdef H5_HAVE_MINGW
+  /* GCC/MINGW uses a different extension to handle unused ellipses */
+  #define HDopen(S,F,...)       _open(S, F | _O_BINARY, ##__VA_ARGS__)
+#else
+  #define HDopen(S,F,...)       _open(S, F | _O_BINARY, __VA_ARGS__)
+#endif
 #define HDread(F,M,Z)       _read(F,M,Z)
 #define HDrmdir(S)          _rmdir(S)
 #define HDsetvbuf(F,S,M,Z)  setvbuf(F,S,M,(Z>1?Z:2))
