This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nirbheek Chauhan <nirbheek@centricular.com>
Date: Thu, 8 Sep 2022 02:36:33 +0530
Subject: [PATCH 1/2] meson: Fix detection of a system-provided proxy-libintl

proxy-libintl defines ngettext() as a define in the header that points
to the actual symbol in the library which is g_libintl_ngettext().
Same with bind_textdomain_codeset().

Upstream-Status: Accepted [https://gitlab.gnome.org/GNOME/glib/-/commit/32249a22fc39319651e7c23442d37ec837f05764]

diff --git a/meson.build b/meson.build
index 1111111..2222222 100644
--- a/meson.build
+++ b/meson.build
@@ -2089,6 +2089,7 @@ libz_dep = dependency('zlib')
 # FIXME: glib-gettext.m4 has much more checks to detect broken/uncompatible
 # implementations. This could be extended if issues are found in some platforms.
 libintl_deps = []
+libintl_prefix = '#include <libintl.h>'
 libintl = dependency('intl', required: false, allow_fallback: false)
 if libintl.found()
   # libintl supports different threading APIs, which may not
@@ -2100,11 +2101,11 @@ if libintl.found()
   #
   # Meson's builtin dependency lookup as of 0.60.0 doesn't check for
   # pthread, so we do this manually here.
-  if cc.has_function('ngettext', dependencies : libintl)
+  if cc.has_function('ngettext', dependencies : libintl, prefix: libintl_prefix)
     libintl_deps += [libintl]
   else
     libintl_pthread = cc.find_library('pthread', required : false)
-    if libintl_pthread.found() and cc.has_function('ngettext', dependencies : [libintl, libintl_pthread])
+    if libintl_pthread.found() and cc.has_function('ngettext', dependencies : [libintl, libintl_pthread], prefix: libintl_prefix)
       libintl_deps += [libintl, libintl_pthread]
     else
       libintl = disabler()
@@ -2113,7 +2114,7 @@ if libintl.found()
 endif
 
 if libintl.found()
-  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset', dependencies: libintl_deps)
+  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset', dependencies: libintl_deps, prefix: libintl_prefix)
 else
   libintl = dependency('intl', allow_fallback: true)
   assert(libintl.type_name() == 'internal')

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 12 Nov 2022 14:49:04 +0100
Subject: [PATCH 2/2] giomodule: allow to be statically linked against GLib

i.e. when GLib and/or GObject is build as a shared library.

Upstream-Status: Pending

diff --git a/gio/giomodule.c b/gio/giomodule.c
index 1111111..2222222 100644
--- a/gio/giomodule.c
+++ b/gio/giomodule.c
@@ -1117,7 +1117,7 @@ extern GType _g_win32_network_monitor_get_type (void);
 
 static HMODULE gio_dll = NULL;
 
-#ifndef GLIB_STATIC_COMPILATION
+#ifndef GIO_STATIC_COMPILATION
 
 BOOL WINAPI DllMain (HINSTANCE hinstDLL,
                      DWORD     fdwReason,
@@ -1137,9 +1137,13 @@ DllMain (HINSTANCE hinstDLL,
   return TRUE;
 }
 
-#elif defined(G_HAS_CONSTRUCTORS) /* && G_PLATFORM_WIN32 && GLIB_STATIC_COMPILATION */
+#elif defined(G_HAS_CONSTRUCTORS) /* && G_PLATFORM_WIN32 && GIO_STATIC_COMPILATION */
+#ifdef GLIB_STATIC_COMPILATION
 extern void glib_win32_init (void);
+#endif /* GLIB_STATIC_COMPILATION */
+#ifdef GOBJECT_STATIC_COMPILATION
 extern void gobject_win32_init (void);
+#endif /* GOBJECT_STATIC_COMPILATION */
 
 #ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
 #pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(giomodule_init_ctor)
@@ -1162,14 +1166,18 @@ giomodule_init_ctor (void)
    * In this case, we must ensure explicitly that glib and gobject are always
    * well initialized BEFORE gio.
    */
+#ifdef GLIB_STATIC_COMPILATION
   glib_win32_init ();
+#endif /* GLIB_STATIC_COMPILATION */
+#ifdef GOBJECT_STATIC_COMPILATION
   gobject_win32_init ();
+#endif /* GOBJECT_STATIC_COMPILATION */
   gio_win32_appinfo_init (FALSE);
 }
 
-#else /* G_PLATFORM_WIN32 && GLIB_STATIC_COMPILATION && !G_HAS_CONSTRUCTORS */
+#else /* G_PLATFORM_WIN32 && GIO_STATIC_COMPILATION && !G_HAS_CONSTRUCTORS */
 #error Your platform/compiler is missing constructor support
-#endif /* GLIB_STATIC_COMPILATION */
+#endif /* GIO_STATIC_COMPILATION */
 
 void *
 _g_io_win32_get_module (void)
 
