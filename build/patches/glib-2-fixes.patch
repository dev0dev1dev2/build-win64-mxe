This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 12 Nov 2022 14:49:04 +0100
Subject: [PATCH 1/2] giomodule: allow to be statically linked against GLib

i.e. when GLib and/or GObject is build as a shared library.

Upstream-Status: Pending

diff --git a/gio/giomodule.c b/gio/giomodule.c
index 1111111..2222222 100644
--- a/gio/giomodule.c
+++ b/gio/giomodule.c
@@ -1117,7 +1117,7 @@ extern GType _g_win32_network_monitor_get_type (void);
 
 static HMODULE gio_dll = NULL;
 
-#ifndef GLIB_STATIC_COMPILATION
+#ifndef GIO_STATIC_COMPILATION
 
 BOOL WINAPI DllMain (HINSTANCE hinstDLL,
                      DWORD     fdwReason,
@@ -1137,9 +1137,13 @@ DllMain (HINSTANCE hinstDLL,
   return TRUE;
 }
 
-#elif defined(G_HAS_CONSTRUCTORS) /* && G_PLATFORM_WIN32 && GLIB_STATIC_COMPILATION */
+#elif defined(G_HAS_CONSTRUCTORS) /* && G_PLATFORM_WIN32 && GIO_STATIC_COMPILATION */
+#ifdef GLIB_STATIC_COMPILATION
 extern void glib_win32_init (void);
+#endif /* GLIB_STATIC_COMPILATION */
+#ifdef GOBJECT_STATIC_COMPILATION
 extern void gobject_win32_init (void);
+#endif /* GOBJECT_STATIC_COMPILATION */
 
 #ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
 #pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(giomodule_init_ctor)
@@ -1162,14 +1166,18 @@ giomodule_init_ctor (void)
    * In this case, we must ensure explicitly that glib and gobject are always
    * well initialized BEFORE gio.
    */
+#ifdef GLIB_STATIC_COMPILATION
   glib_win32_init ();
+#endif /* GLIB_STATIC_COMPILATION */
+#ifdef GOBJECT_STATIC_COMPILATION
   gobject_win32_init ();
+#endif /* GOBJECT_STATIC_COMPILATION */
   gio_win32_appinfo_init (FALSE);
 }
 
-#else /* G_PLATFORM_WIN32 && GLIB_STATIC_COMPILATION && !G_HAS_CONSTRUCTORS */
+#else /* G_PLATFORM_WIN32 && GIO_STATIC_COMPILATION && !G_HAS_CONSTRUCTORS */
 #error Your platform/compiler is missing constructor support
-#endif /* GLIB_STATIC_COMPILATION */
+#endif /* GIO_STATIC_COMPILATION */
 
 void *
 _g_io_win32_get_module (void)
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 31 Oct 2023 22:37:33 +0100
Subject: [PATCH 2/2] gsignalgroup: Avoid function call with side effect in g_return_* macro

This ensures that g_signal_parse_name is always called,
regardless of whether G_DISABLE_CHECKS is defined or not.

Upstream-Status: Accepted [https://gitlab.gnome.org/GNOME/glib/-/commit/f3f23b0229c6172ad1678ce4c724a43a3f7a390e]

diff --git a/gobject/gsignalgroup.c b/gobject/gsignalgroup.c
index 1111111..2222222 100644
--- a/gobject/gsignalgroup.c
+++ b/gobject/gsignalgroup.c
@@ -718,10 +718,15 @@ g_signal_group_connect_closure_ (GSignalGroup   *self,
 
   g_return_val_if_fail (G_IS_SIGNAL_GROUP (self), FALSE);
   g_return_val_if_fail (detailed_signal != NULL, FALSE);
-  g_return_val_if_fail (g_signal_parse_name (detailed_signal, self->target_type,
-                                             &signal_id, &signal_detail, TRUE) != 0, FALSE);
   g_return_val_if_fail (closure != NULL, FALSE);
 
+  if (!g_signal_parse_name (detailed_signal, self->target_type,
+                            &signal_id, &signal_detail, TRUE))
+    {
+      g_critical ("Invalid signal name \"%s\"", detailed_signal);
+      return FALSE;
+    }
+
   g_rec_mutex_lock (&self->mutex);
 
   if (self->has_bound_at_least_once)
